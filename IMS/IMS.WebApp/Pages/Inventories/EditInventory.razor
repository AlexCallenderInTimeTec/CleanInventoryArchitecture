@page "/editinventory/{InventoryId:int}"

@inject IViewInventoryByIdUseCase ViewInventoryById
@inject NavigationManager NavMan
@inject IEditInventoryUseCase EditInvetory


<h3>Edit Inventory</h3>
<br />

<EditForm Model="inventory" OnValidSubmit="SaveInventory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name"
                   @bind-Value="inventory.InventoryName"
                   class="form-control">
        </InputText>
    </div>

        <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
            @bind-Value="inventory.Quantity"
            class="form-control">
        </InputNumber>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price"
            @bind-Value="inventory.Price"
            class="form-control">
        </InputNumber>
    </div>
    <br />

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-danger" @onclick="CancelInventory">Cancel</button>



</EditForm>

@code {
    [Parameter]
    public int InventoryID { get; set; }

    private Inventory inventory = new Inventory();

    protected override async Task OnParametersSetAsync()
    {
        this.inventory = await ViewInventoryById.ExecuteAsync(this.InventoryID);
    }

    private async Task SaveInventory()
    {
        await EditInvetory.ExcuteAsyc(this.inventory);
        NavMan.NavigateTo("/inventories");
    }

    private void CancelInventory()
    {
        NavMan.NavigateTo("/inventories");
    }
}
